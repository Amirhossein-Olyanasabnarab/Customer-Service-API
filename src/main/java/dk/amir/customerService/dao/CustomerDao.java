package dk.amir.customerService.dao;

import dk.amir.customerService.model.Customer;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;


/**
 * In-memory DAO (Data Access Object) for managing {@link Customer} entities.
 * <p>
 * This implementation uses a thread-safe {@link ConcurrentHashMap} to simulate persistent storage
 * for CRUD operations on customer data. It's suitable for prototyping or testing scenarios
 * where no real database is used.
 * </p>
 * <p>
 * Each customer is assigned a unique ID generated by an {@link AtomicLong}.
 * </p>
 */

@Repository
public class CustomerDao {

    private final Map<Long, Customer> customers = new ConcurrentHashMap<>();
    private final AtomicLong idGenerator = new AtomicLong(0);


    /**
     * Saves a new customer and assigns a unique ID.
     *
     * @param customer the customer to save
     * @return the saved customer with a generated ID
     */
    public Customer save(Customer customer) {
        Long id = idGenerator.incrementAndGet();
        customer.setId(id);
        customers.put(id, customer);
        return customer;
    }


    /**
     * Finds a customer by their ID.
     *
     * @param id the ID of the customer
     * @return the customer if found, otherwise null
     */
    public Customer findById(Long id) {
        return customers.get(id);
    }


    /**
     * Retrieves all stored customers.
     *
     * @return a list of all customers
     */
    public List<Customer> findAll() {
        return customers.values()
                .stream().toList();
    }


    /**
     * Updates an existing customer with new data.
     *
     * @param id       the ID of the customer to update
     * @param customer the updated customer data
     * @return the previous customer if existed, otherwise null
     */
    public Customer update(Long id,Customer customer) {
        customer.setId(id);
        return customers.put(id, customer);
    }


    /**
     * Deletes a customer by their ID.
     *
     * @param id the ID of the customer to delete
     * @return true if the customer was deleted, false if not found
     */
    public boolean delete(Long id) {
        return customers.remove(id) != null;
    }


    /**
     * Checks if a customer exists by ID.
     *
     * @param id the ID to check
     * @return true if the customer exists, false otherwise
     */
    public boolean isExist(Long id) {
        return customers.containsKey(id);
    }
}
